diff --git a/node_modules/menubar/lib/Menubar.js b/node_modules/menubar/lib/Menubar.js
index 565434b..da85f61 100644
--- a/node_modules/menubar/lib/Menubar.js
+++ b/node_modules/menubar/lib/Menubar.js
@@ -229,16 +229,22 @@ var Menubar = /** @class */ (function (_super) {
                             noBoundsPosition =
                                 process.platform === 'win32' ? 'bottomRight' : 'topRight';
                         }
+                        // modified by WebCatalog
+                        // only set/init position at first launch
+                        // as the app remembers window position
+                        if (this._options.isMenubarBrowser || !this._firstShow) {
+                        this._firstShow = true;
                         position = this.positioner.calculate(this._options.windowPosition || noBoundsPosition, trayPos);
-                        x = this._options.browserWindow.x !== undefined
+                        x = this._options.browserWindow.x !== undefined && !this._options.isMenubarBrowser
                             ? this._options.browserWindow.x
                             : position.x;
-                        y = this._options.browserWindow.y !== undefined
+                        y = this._options.browserWindow.y !== undefined && !this._options.isMenubarBrowser
                             ? this._options.browserWindow.y
                             : position.y;
                         // `.setPosition` crashed on non-integers
                         // https://github.com/maxogden/menubar/issues/233
                         this._browserWindow.setPosition(Math.round(x), Math.round(y));
+                        }
                         this._browserWindow.show();
                         this._isVisible = true;
                         this.emit('after-show');
@@ -277,11 +283,13 @@ var Menubar = /** @class */ (function (_super) {
                         if (!this.tray) {
                             throw new Error('Tray has been initialized above');
                         }
-                        this.tray.on(defaultClickEvent, 
-                        // eslint-disable-next-line @typescript-eslint/no-misused-promises
-                        this.clicked.bind(this));
-                        // eslint-disable-next-line @typescript-eslint/no-misused-promises
-                        this.tray.on('double-click', this.clicked.bind(this));
+                        if (!this._options.isMenubarBrowser) {
+                            this.tray.on(defaultClickEvent,
+                            // eslint-disable-next-line @typescript-eslint/no-misused-promises
+                            this.clicked.bind(this));
+                            // eslint-disable-next-line @typescript-eslint/no-misused-promises
+                            this.tray.on('double-click', this.clicked.bind(this));
+                        }
                         this.tray.setToolTip(this._options.tooltip);
                         if (!this._options.windowPosition) {
                             // Fill in this._options.windowPosition when taskbar position is available
@@ -342,6 +350,7 @@ var Menubar = /** @class */ (function (_super) {
                             frame: false,
                         };
                         this._browserWindow = new electron_1.BrowserWindow(__assign(__assign({}, defaults), this._options.browserWindow));
+                        require("@electron/remote/main").enable(this._browserWindow.webContents);
                         this._positioner = new electron_positioner_1.default(this._browserWindow);
                         this._browserWindow.on('blur', function () {
                             if (!_this._browserWindow) {
@@ -355,7 +364,10 @@ var Menubar = /** @class */ (function (_super) {
                                 }, 100));
                         });
                         if (this._options.showOnAllWorkspaces !== false) {
-                            this._browserWindow.setVisibleOnAllWorkspaces(true);
+                            // https://github.com/electron/electron/issues/25368
+                            this._browserWindow.setVisibleOnAllWorkspaces(true, {
+                                visibleOnFullScreen: true,
+                            });
                         }
                         this._browserWindow.on('close', this.windowClear.bind(this));
                         if (!(this._options.index !== false)) return [3 /*break*/, 2];
